# –ó–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!
# Run as Administrator!
# –ó–∞–ø—É—Å–∫–∞—Ç–∏ –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!

# Check if running as administrator
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "ERROR: This script must be run as Administrator!" -ForegroundColor Red
    Write-Host "–û–®–ò–ë–ö–ê: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!" -ForegroundColor Red
    Write-Host "–ü–û–ú–ò–õ–ö–ê: –¶–µ–π —Å–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∏–π –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!" -ForegroundColor Red
    Write-Host "`nPress any key to exit..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    exit 1
}

# Language selection with better formatting
Clear-Host
Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Cyan
Write-Host "‚ïë                                             üåê UDP Port Manager v1.0 üåê                                                                      ‚ïë" -ForegroundColor Cyan
Write-Host "‚ïë                                               CS2 Network Optimizer                                                                         ‚ïë" -ForegroundColor Cyan
Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Cyan
Write-Host ""
Write-Host "Select language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:" -ForegroundColor Yellow
Write-Host "1. üá∫üá∏ English"
Write-Host "2. üá∑üá∫ –†—É—Å—Å–∫–∏–π"
Write-Host "3. üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"
Write-Host ""
do {
    $langChoice = Read-Host "Enter choice (1-3)"
} while ($langChoice -notin @("1", "2", "3"))

# Language strings
$strings = @{
    "en" = @{
        "installing_ports" = "Installing extended ephemeral port range..."
        "current_range" = "Current ephemeral port range:"
        "collecting_stats" = "Collecting statistics on open UDP ports..."
        "no_heavy_users" = "No processes with excessive UDP connections found."
        "found_heavy_users" = "Found processes with more than {0} open UDP connections:"
        "connections_count" = "connections"
        "kill_process" = "Terminate process {0}? (y/n)"
        "terminated" = "Terminated."
        "skipped" = "Skipped."
        "process_info_error" = "[PID {0}] Could not get process information (possibly already terminated)"
        "backup_created" = "Backup of original settings created: {0}"
        "backup_failed" = "Warning: Could not create backup of original settings"
        "original_range" = "Original ephemeral port range:"
        "new_range" = "New ephemeral port range:"
        "firewall_check" = "Checking Windows Firewall status..."
        "firewall_enabled" = "Windows Firewall is enabled - this may affect CS2 connectivity"
        "firewall_disabled" = "Windows Firewall is disabled"
        "network_adapter_info" = "Network adapter information:"
        "dns_flush" = "Flushing DNS cache..."
        "dns_flushed" = "DNS cache flushed successfully"
        "checking_cs2" = "Checking for running CS2 processes..."
        "cs2_running" = "‚ö†Ô∏è  CS2 is currently running. Please close it before continuing."
        "cs2_not_running" = "CS2 is not running - good to proceed"
        "performance_mode" = "Applying high-performance network settings..."
        "performance_applied" = "High-performance settings applied"
        "testing_connectivity" = "Testing network connectivity..."
        "connectivity_good" = "Network connectivity test passed"
        "connectivity_issues" = "Network connectivity issues detected"
        "log_created" = "Operation log saved to: {0}"
    }
    "ru" = @{
        "installing_ports" = "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ephemeral –ø–æ—Ä—Ç–æ–≤..."
        "current_range" = "–¢–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω ephemeral –ø–æ—Ä—Ç–æ–≤:"
        "collecting_stats" = "–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º UDP –ø–æ—Ä—Ç–∞–º..."
        "no_heavy_users" = "–ù–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å —á—Ä–µ–∑–º–µ—Ä–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º UDP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."
        "found_heavy_users" = "–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –±–æ–ª–µ–µ —á–µ–º {0} –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ UDP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏:"
        "connections_count" = "UDP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"
        "kill_process" = "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {0}? (y/n)"
        "terminated" = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ."
        "skipped" = "–ü—Ä–æ–ø—É—â–µ–Ω–æ."
        "process_info_error" = "[PID {0}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω)"
        "backup_created" = "–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {0}"
        "backup_failed" = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏—Å—Ö–æ–¥–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        "original_range" = "–ò—Å—Ö–æ–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω ephemeral –ø–æ—Ä—Ç–æ–≤:"
        "new_range" = "–ù–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω ephemeral –ø–æ—Ä—Ç–æ–≤:"
        "firewall_check" = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞ Windows..."
        "firewall_enabled" = "–ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä Windows –≤–∫–ª—é—á–µ–Ω - —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CS2"
        "firewall_disabled" = "–ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä Windows –æ—Ç–∫–ª—é—á–µ–Ω"
        "network_adapter_info" = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤–æ–º –∞–¥–∞–ø—Ç–µ—Ä–µ:"
        "dns_flush" = "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ DNS..."
        "dns_flushed" = "–ö—ç—à DNS —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω"
        "checking_cs2" = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ CS2..."
        "cs2_running" = "‚ö†Ô∏è  CS2 –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
        "cs2_not_running" = "CS2 –Ω–µ –∑–∞–ø—É—â–µ–Ω - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å"
        "performance_mode" = "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫..."
        "performance_applied" = "–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
        "testing_connectivity" = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
        "connectivity_good" = "–¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω"
        "connectivity_issues" = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"
        "log_created" = "–ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {0}"
    }
    "ua" = @{
        "installing_ports" = "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É ephemeral –ø–æ—Ä—Ç—ñ–≤..."
        "current_range" = "–ü–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω ephemeral –ø–æ—Ä—Ç—ñ–≤:"
        "collecting_stats" = "–ó–±—ñ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º UDP –ø–æ—Ä—Ç–∞–º..."
        "no_heavy_users" = "–ù–µ–º–∞—î –ø—Ä–æ—Ü–µ—Å—ñ–≤ –∑ –Ω–∞–¥–º—ñ—Ä–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é UDP-–∑'—î–¥–Ω–∞–Ω—å."
        "found_heavy_users" = "–ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å–∏ –∑ –±—ñ–ª—å—à –Ω—ñ–∂ {0} –≤—ñ–¥–∫—Ä–∏—Ç–∏–º–∏ UDP-–∑'—î–¥–Ω–∞–Ω–Ω—è–º–∏:"
        "connections_count" = "UDP-–∑'—î–¥–Ω–∞–Ω—å"
        "kill_process" = "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å {0}? (y/n)"
        "terminated" = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ."
        "skipped" = "–ü—Ä–æ–ø—É—â–µ–Ω–æ."
        "process_info_error" = "[PID {0}] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ—Ü–µ—Å (–º–æ–∂–ª–∏–≤–æ, –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π)"
        "backup_created" = "–°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {0}"
        "backup_failed" = "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"
        "original_range" = "–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω ephemeral –ø–æ—Ä—Ç—ñ–≤:"
        "new_range" = "–ù–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω ephemeral –ø–æ—Ä—Ç—ñ–≤:"
        "firewall_check" = "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –±—Ä–∞–Ω–¥–º–∞—É–µ—Ä–∞ Windows..."
        "firewall_enabled" = "–ë—Ä–∞–Ω–¥–º–∞—É–µ—Ä Windows —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π - —Ü–µ –º–æ–∂–µ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ CS2"
        "firewall_disabled" = "–ë—Ä–∞–Ω–¥–º–∞—É–µ—Ä Windows –≤–∏–º–∫–Ω–µ–Ω–∏–π"
        "network_adapter_info" = "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–µ—Ä–µ–∂–µ–≤–∏–π –∞–¥–∞–ø—Ç–µ—Ä:"
        "dns_flush" = "–û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É DNS..."
        "dns_flushed" = "–ö–µ—à DNS —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ"
        "checking_cs2" = "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ CS2..."
        "cs2_running" = "‚ö†Ô∏è  CS2 –Ω–∞—Ä–∞–∑—ñ –∑–∞–ø—É—â–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–∫—Ä–∏–π—Ç–µ –π–æ–≥–æ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º."
        "cs2_not_running" = "CS2 –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π - –º–æ–∂–Ω–∞ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏"
        "performance_mode" = "–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏—Å–æ–∫–æ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∏—Ö –º–µ—Ä–µ–∂–µ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å..."
        "performance_applied" = "–í–∏—Å–æ–∫–æ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ"
        "testing_connectivity" = "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è..."
        "connectivity_good" = "–¢–µ—Å—Ç –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–æ–π–¥–µ–Ω–æ"
        "connectivity_issues" = "–í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –º–µ—Ä–µ–∂–µ–≤–∏–º –∑'—î–¥–Ω–∞–Ω–Ω—è–º"
        "log_created" = "–ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü—ñ–π –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {0}"
    }
}

# Set language based on choice
switch ($langChoice) {
    "1" { $lang = "en" }
    "2" { $lang = "ru" }
    "3" { $lang = "ua" }
    default { $lang = "en" }
}

$s = $strings[$lang]

# Initialize logging
$logFile = "UDP_Port_Manager_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
$logPath = Join-Path $PSScriptRoot $logFile

function Write-Log {
    param($Message, $Color = "White")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] $Message"
    Add-Content -Path $logPath -Value $logMessage
    Write-Host $Message -ForegroundColor $Color
}

# Start logging
Write-Log "UDP Port Manager v1.0 started" "Cyan"
Write-Log "Selected language: $lang" "Cyan"

# Check for CS2 processes
Write-Log $s["checking_cs2"] "Yellow"
$cs2Processes = Get-Process -Name "cs2" -ErrorAction SilentlyContinue
if ($cs2Processes) {
    Write-Log $s["cs2_running"] "Red"
    $continue = Read-Host "Continue anyway? (y/n)"
    if ($continue -ne "y") {
        Write-Log "Operation cancelled by user" "Yellow"
        exit 0
    }
} else {
    Write-Log $s["cs2_not_running"] "Green"
}

# Create backup of original settings
Write-Log "Creating backup of original settings..." "Yellow"
try {
    $originalRange = netsh int ipv4 show dynamicport udp
    $backupFile = "UDP_Port_Backup_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"
    $backupPath = Join-Path $PSScriptRoot $backupFile
    $originalRange | Out-File -FilePath $backupPath -Encoding UTF8
    Write-Log ($s["backup_created"] -f $backupPath) "Green"
} catch {
    Write-Log $s["backup_failed"] "Yellow"
}

# Show original range
Write-Log $s["original_range"] "Cyan"
$originalRange

# Apply high-performance network settings
Write-Log $s["performance_mode"] "Yellow"
try {
    # Set TCP parameters for better performance
    netsh int tcp set global autotuninglevel=normal | Out-Null
    netsh int tcp set global rss=enabled | Out-Null
    netsh int tcp set global chimney=enabled | Out-Null
    netsh int tcp set global netdma=enabled | Out-Null
    Write-Log $s["performance_applied"] "Green"
} catch {
    Write-Log "Failed to apply performance settings" "Yellow"
}

# Flush DNS cache
Write-Log $s["dns_flush"] "Yellow"
try {
    ipconfig /flushdns | Out-Null
    Write-Log $s["dns_flushed"] "Green"
} catch {
    Write-Log "Failed to flush DNS cache" "Yellow"
}

# Check Windows Firewall status
Write-Log $s["firewall_check"] "Yellow"
try {
    $firewallProfiles = Get-NetFirewallProfile | Where-Object { $_.Enabled -eq $true }
    if ($firewallProfiles) {
        Write-Log $s["firewall_enabled"] "Yellow"
    } else {
        Write-Log $s["firewall_disabled"] "Green"
    }
} catch {
    Write-Log "Could not check firewall status" "Yellow"
}

# Main script execution
Write-Log $s["installing_ports"] "Yellow"
netsh int ipv4 set dynamicport udp start=10000 num=55535 | Out-Null

# Check current range
$newRange = netsh int ipv4 show dynamicport udp
Write-Log $s["new_range"] "Cyan"
$newRange

# Test network connectivity
Write-Log $s["testing_connectivity"] "Yellow"
try {
    $testResults = @()
    $testHosts = @("8.8.8.8", "1.1.1.1", "valve.steampowered.com")
    
    foreach ($host in $testHosts) {
        $ping = Test-Connection -ComputerName $host -Count 1 -Quiet
        $testResults += $ping
    }
    
    if ($testResults -contains $true) {
        Write-Log $s["connectivity_good"] "Green"
    } else {
        Write-Log $s["connectivity_issues"] "Red"
    }
} catch {
    Write-Log "Could not test connectivity" "Yellow"
}

# Get active UDP connections
Write-Log $s["collecting_stats"] "Yellow"
$udpUsage = Get-NetUDPEndpoint | Group-Object -Property OwningProcess | Sort-Object Count -Descending

# Threshold: how many connections to consider suspiciously large
$threshold = 100
$heavyUsers = $udpUsage | Where-Object { $_.Count -ge $threshold }

if ($heavyUsers.Count -eq 0) {
    Write-Log $s["no_heavy_users"] "Green"
} else {
    Write-Log ($s["found_heavy_users"] -f $threshold) "Yellow"

    foreach ($procGroup in $heavyUsers) {
        try {
            $pid = $procGroup.Name
            $proc = Get-Process -Id $pid -ErrorAction Stop
            $message = " - $($proc.ProcessName) (PID: $pid) ‚Äî $($procGroup.Count) $($s["connections_count"])"
            Write-Log $message "White"

            $kill = Read-Host (" ‚Üí " + ($s["kill_process"] -f $proc.ProcessName))
            if ($kill -eq "y") {
                Stop-Process -Id $pid -Force
                Write-Log ("   " + $s["terminated"]) "Green"
            } else {
                Write-Log ("   " + $s["skipped"]) "Yellow"
            }
        } catch {
            $errorMessage = " - " + ($s["process_info_error"] -f $pid)
            Write-Log $errorMessage "Red"
        }
    }
}

# Final summary
Write-Log "=== OPERATION SUMMARY ===" "Cyan"
Write-Log "UDP Port range: 10000-65535" "Green"
Write-Log "DNS cache cleared" "Green"
Write-Log "Performance settings applied" "Green"
Write-Log ($s["log_created"] -f $logPath) "Cyan"
Write-Log $s["script_completed"] "Cyan"
Pause
